# "Avalanche" Hybrid flow
# modified to adapt to less responsive arrays


floor = .3

# SONAR ##########################################

rate_boost = 7 # spin faster or slower
res = 25 # time steps per period
A = 0.4  # sine amplitude
B = .8  # number of "blades"
D = 0.4  # DC offset

c_center = C/2 - .5*(C%2)
r_center = R/2 - .5*(R%2)

c_rad = (c - c_center)**2
r_rad = (r - r_center)**2


rad = math.sqrt(c_rad + r_rad)
max_rad = math.sqrt(c_center**2 + r_center**2)

phase = 2*math.pi*(k/res)*rate_boost

x = c_center - c
y = r_center - r
d = math.sqrt(x**2 + y**2)

sonar = A*math.sin(math.atan2(y, x)*B + phase) + D if d != 0 else D

# FLUCTUATIONS ###################################

# Parameters # ..................................
mean = sonar
dev_range_percent = 1 #(k%1000)/1000
layer_uniform = 1

# ...............................................
range = min(mean, 1 - mean)
dev_max = range*dev_range_percent

tod = mean
if l == layer_uniform:
	return mean + floor
else:
	tod = mean+ l*(2*dev_max*random() - dev_max)


# DONUT ##########################################

c_center = C/2 - .5*(C%2)
r_center = R/2 - .5*(R%2)
tol = 2

in_center = abs(c - c_center) < tol and abs(r - r_center) < tol

c_rad = (c - c_center)**2
r_rad = (r - r_center)**2

rad = math.sqrt(c_rad + r_rad)
max_rad = math.sqrt(c_center**2 + r_center**2)

phase = 2*math.pi*(rad/max_rad)
A = 0.5
res = 50

donut = A*math.sin(-2*math.pi*((k%res)/res) + phase) + A


# APPLY ##########################################

scale = 1

return tod*donut*scale + floor



















